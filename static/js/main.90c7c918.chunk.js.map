{"version":3,"sources":["Disc.js","Cell.js","Board.js","AI.js","EndPanel.js","App.js","reportWebVitals.js","index.js"],"names":["Disc","props","className","style","backgroundColor","color","zIndex","position","top","left","Cell","state","width","height","onClick","event","onClickCell","r","c","Board","element","rows","row","columns","values","marginLeft","marginRight","visitedNodes","alphaBeta","alpha","beta","depth","max","map","arr","slice","checkWin","evaluate","value","Number","MAX_VALUE","length","Math","makeTurn","min","player","newValues","i","betterValues","val","neighbors","sum","minWin","maxWin","maxOpportunity","minOpportunity","score","nextTurn","bestC","console","log","EndPanel","message","gameState","restart","update","turn","setTurn","setValues","setGameState","Array","from","count","App","useState","document","title","hidden","copy","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90c7c918.chunk.js","sourcesContent":["function Disc(props) {\r\n    return <div className=\"disc\" style={{backgroundColor: props.color, zIndex: props.zIndex, position:\"absolute\", top:10, left:10}}></div>;\r\n}\r\n\r\nexport default Disc;","import Disc from \"./Disc\";\r\n\r\nfunction Cell(props) {\r\n    let color;\r\n    switch(props.state) {\r\n        case \"player1\":\r\n            color=\"#4ECDC4\";\r\n            break;\r\n        case \"player2\":\r\n            color=\"#FF6B6B\";\r\n            break;\r\n        default:\r\n            color=\"#FFFFFF\";\r\n            break;\r\n    }\r\n    return <div style={{position: \"relative\", width: \"100px\", height: \"100px\"}} onClick={(event) => props.onClickCell(props.r, props.c)}>\r\n        <div className=\"slot\" style={{backgroundColor: \"#292F36\", position:\"absolute\", top:0, left:0, zIndex:-2}}></div>\r\n        <Disc color={color} zIndex={2}/>\r\n    </div>;\r\n}\r\n\r\nexport default Cell;","import Cell from \"./Cell\";\r\n\r\nfunction Board(props) {\r\n    let element;\r\n    for (let r = 0; r < props.rows; r++) {\r\n        let row;\r\n        for (let c = 0; c < props.columns; c++) {\r\n            let state;\r\n            switch(props.values[props.rows - r - 1][props.columns - c - 1]) {\r\n                case 1:\r\n                    state = \"player1\";\r\n                    break;\r\n                case 2:\r\n                    state = \"player2\";\r\n                    break;\r\n                default:\r\n                    state = \"empty\";\r\n                    break;\r\n            }\r\n            row = [\r\n                <td key={\"d_\" + r * props.columns + c}><Cell state={state} r={props.rows - r - 1} c={props.columns - c - 1}\r\n                onClickCell={(r, c) => props.onClickCell(r, c)}/></td>,\r\n                row\r\n            ]\r\n        }\r\n        element = [\r\n            <tr key={\"r_\" + r}>{row}</tr>,\r\n            element\r\n        ]\r\n    }\r\n    return <table style={{marginLeft: \"auto\", marginRight: \"auto\"}}><tbody>{element}</tbody></table>;\r\n}\r\n\r\nexport default Board;","const depth = 6;\r\n\r\nlet visitedNodesAB = 0;\r\nlet visitedNodes = 0;\r\nconst useAlphaBeta = true;\r\n\r\nfunction nextTurn(values) {\r\n    let max = -Number.MAX_VALUE;\r\n    let bestC = 0;\r\n    for (let c = 0; c < values[0].length; c++) {\r\n        if (values[0][c] !== 0) continue;\r\n        let val = (useAlphaBeta)? alphaBeta(makeTurn(values, c, 2), -Number.MAX_VALUE, Number.MAX_VALUE, depth, false) : minimax(makeTurn(values, c, 2), depth, false);\r\n        if (val > max) {\r\n            max = val;\r\n            bestC = c;\r\n        }\r\n    }\r\n    if (useAlphaBeta) console.log(\"Nodes visited: \" + visitedNodes + \", value: \" + max);\r\n    else console.log(\"Nodes visited: \" + visitedNodesAB + \", value: \" + max);\r\n    visitedNodesAB = 0;\r\n    visitedNodes = 0;\r\n    return bestC;\r\n}\r\n\r\nfunction alphaBeta(values, alpha, beta, depth, max) {\r\n    visitedNodesAB++;\r\n    values = values.map(function(arr) {\r\n        return arr.slice();\r\n    });\r\n    if (depth === 0 || checkWin(values)) {\r\n        return evaluate(values);\r\n    } else if (max) {\r\n        let value = -Number.MAX_VALUE;\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            if (values[0][c] !== 0) continue;\r\n            value = Math.max(value, alphaBeta(makeTurn(values, c, 2), alpha, beta, depth - 1, false));\r\n            alpha = Math.max(value, alpha);\r\n            if (value >= beta) {\r\n                break;\r\n            }\r\n        }\r\n        return value;\r\n    } else {\r\n        let value = Number.MAX_VALUE;\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            if (values[0][c] !== 0) continue;\r\n            value = Math.min(value, alphaBeta(makeTurn(values, c, 1), alpha, beta,depth - 1, true));\r\n            beta = Math.min(value, beta);\r\n            if (value <= alpha) {\r\n                break;\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n}\r\n\r\nfunction minimax(values, depth, max) {\r\n    visitedNodes++;\r\n    values = values.map(function(arr) {\r\n        return arr.slice();\r\n    });\r\n    if (depth === 0 || checkWin(values)) {\r\n        return evaluate(values);\r\n    } else if (max) {\r\n        let value = -Number.MAX_VALUE;\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            if (values[0][c] !== 0) continue;\r\n            value = Math.max(value, minimax(makeTurn(values, c, 2), depth - 1, false));\r\n        }\r\n        return value;\r\n    } else {\r\n        let value = Number.MAX_VALUE;\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            if (values[0][c] !== 0) continue;\r\n            value = Math.min(value, minimax(makeTurn(values, c, 1), depth - 1, true));\r\n        }\r\n        return value;\r\n    }\r\n}\r\n\r\n// Return board after a player put\r\nfunction makeTurn(values, c, player) {\r\n    let newValues = values.map(function(arr) {\r\n        return arr.slice();\r\n    });\r\n    let i = values.length - 1;\r\n    while(i > 0 && values[i][c] !== 0) {\r\n        i--;\r\n    }\r\n    newValues[i][c] = player;\r\n    return newValues;\r\n}\r\n\r\n// Returns true if at least one of the players won\r\nfunction checkWin(values) {\r\n    let betterValues = values.map(function(arr) {\r\n        return arr.slice();\r\n    });\r\n    // Transform Values\r\n    for (let r = 0; r < values.length; r++) {\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            let val = 0;\r\n            if (values[r][c] === 2) val = 1;\r\n            if (values[r][c] === 1) val = -1;\r\n            betterValues[r][c] = val;\r\n        }\r\n    }\r\n    // Verticals\r\n    for (let r = 0; r < values.length - 3; r++) {\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            let neighbors = betterValues[r][c] + betterValues[r+1][c] + betterValues[r+2][c] + betterValues[r+3][c];\r\n            if (neighbors === 4 || neighbors === -4 ) return true ;\r\n        }\r\n    }\r\n    // Horizontals\r\n    for (let r = 0; r < values.length; r++) {\r\n        for (let c = 0; c < values[0].length - 3; c++) {\r\n            let neighbors = betterValues[r][c] + betterValues[r][c+1] + betterValues[r][c+2] + betterValues[r][c+3];\r\n            if (neighbors === 4 || neighbors === -4 ) return true ;\r\n        }\r\n    }\r\n    // Diagonals TL\r\n    for (let r = 0; r < values.length - 3; r++) {\r\n        for (let c = 0; c < values[0].length - 3; c++) {\r\n            let neighbors = betterValues[r][c] + betterValues[r+1][c+1] + betterValues[r+2][c+2] + betterValues[r+3][c+3];\r\n            if (neighbors === 4 || neighbors === -4 ) return true ;\r\n        }\r\n    }\r\n    // Diagonals TR\r\n    for (let r = 0; r < values.length - 3; r++) {\r\n        for (let c = 0; c < values[0].length - 3; c++) {\r\n            let neighbors = betterValues[r][c+3] + betterValues[r+1][c+2] + betterValues[r+2][c+1] + betterValues[r+3][c];\r\n            if (neighbors === 4 || neighbors === -4 ) return true ;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// Evaluation function for a board\r\nfunction evaluate(values, max) {\r\n    let sum = 0;\r\n    let betterValues = values.map(function(arr) {\r\n        return arr.slice();\r\n    });\r\n    let minWin = false;\r\n    let maxWin = false;\r\n\r\n    // Transform Values\r\n    for (let r = 0; r < values.length; r++) {\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            let val = 0;\r\n            if (values[r][c] === 2) val = 1;\r\n            if (values[r][c] === 1) val = -1;\r\n            betterValues[r][c] = val;\r\n        }\r\n    }\r\n    // Verticals\r\n    for (let r = 0; r < values.length - 3; r++) {\r\n        for (let c = 0; c < values[0].length; c++) {\r\n            let neighbors = betterValues[r][c] + betterValues[r+1][c] + betterValues[r+2][c] + betterValues[r+3][c];\r\n            let maxOpportunity = Math.min(betterValues[r][c], betterValues[r+1][c], betterValues[r+2][c], betterValues[r+3][c]) === 0;\r\n            let minOpportunity = Math.max(betterValues[r][c], betterValues[r+1][c], betterValues[r+2][c], betterValues[r+3][c]) === 0\r\n            if (neighbors === 4) maxWin = true;\r\n            if (neighbors === -4) minWin = true;\r\n            if (!maxOpportunity || !minOpportunity) sum += score(neighbors);\r\n        }\r\n    }\r\n    // Horizontals\r\n    for (let r = 0; r < values.length; r++) {\r\n        for (let c = 0; c < values[0].length - 3; c++) {\r\n            let neighbors = betterValues[r][c] + betterValues[r][c+1] + betterValues[r][c+2] + betterValues[r][c+3];\r\n            let maxOpportunity = Math.min(betterValues[r][c], betterValues[r][c+1], betterValues[r][c+2], betterValues[r][c+3]) === 0;\r\n            let minOpportunity = Math.max(betterValues[r][c], betterValues[r][c+1], betterValues[r][c+2], betterValues[r][c+3]) === 0;\r\n            if (neighbors === 4) maxWin = true;\r\n            if (neighbors === -4) minWin = true;\r\n            if (!maxOpportunity || !minOpportunity) sum += score(neighbors);\r\n        }\r\n    }\r\n    // Diagonals TL\r\n    for (let r = 0; r < values.length - 3; r++) {\r\n        for (let c = 0; c < values[0].length - 3; c++) {\r\n            let neighbors = betterValues[r][c] + betterValues[r+1][c+1] + betterValues[r+2][c+2] + betterValues[r+3][c+3];\r\n            let maxOpportunity = Math.min(betterValues[r][c], betterValues[r+1][c+1], betterValues[r+2][c+2], betterValues[r+3][c+3]) === 0;\r\n            let minOpportunity = Math.max(betterValues[r][c], betterValues[r+1][c+1], betterValues[r+2][c+2], betterValues[r+3][c+3]) === 0;\r\n            if (neighbors === 4) maxWin = true;\r\n            if (neighbors === -4) minWin = true;\r\n            if (!maxOpportunity || !minOpportunity) sum += score(neighbors);\r\n        }\r\n    }\r\n    // Diagonals TR\r\n    for (let r = 0; r < values.length - 3; r++) {\r\n        for (let c = 0; c < values[0].length - 3; c++) {\r\n            let neighbors = betterValues[r][c+3] + betterValues[r+1][c+2] + betterValues[r+2][c+1] + betterValues[r+3][c];\r\n            let maxOpportunity = Math.min(betterValues[r][c+3], betterValues[r+1][c+2], betterValues[r+2][c+1], betterValues[r+3][c]) === 0;\r\n            let minOpportunity = Math.max(betterValues[r][c+3], betterValues[r+1][c+2], betterValues[r+2][c+1], betterValues[r+3][c]) === 0;\r\n            if (neighbors === 4) maxWin = true;\r\n            if (neighbors === -4) minWin = true;\r\n            if (!maxOpportunity || !minOpportunity) sum += score(neighbors);\r\n        }\r\n    }\r\n\r\n    if (maxWin && minWin) {\r\n        if (max) return Number.MAX_VALUE;\r\n        else return -Number.MAX_VALUE;\r\n    }\r\n    if (minWin) return -Number.MAX_VALUE;\r\n    if (maxWin) return Number.MAX_VALUE;\r\n    return sum;\r\n}\r\n\r\n// Returns a score based on the number of neiugbours\r\nfunction score(neighbors) {\r\n    switch (neighbors) {\r\n        case -3:\r\n            return -4;\r\n        case -2:\r\n            return -2;\r\n        case -1:\r\n            return -1;\r\n        case 0:\r\n            return 0;\r\n        case 1:\r\n            return 1;\r\n        case 2:\r\n            return 2;\r\n        case 3:\r\n            return 4;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nexport default nextTurn;","\r\n\r\n// Game States\r\n// const GAME_IN_PROGRESS = 0;\r\nconst PLAYER_1_WIN = 1;\r\nconst PLAYER_2_WIN = 2;\r\nconst DRAW = 3;\r\n\r\nfunction EndPanel(props) {\r\n    let message;\r\n     switch(props.gameState) {\r\n         case PLAYER_1_WIN:\r\n             message = \"Player 1 won!\";\r\n             break;\r\n         case PLAYER_2_WIN:\r\n             message = \"Player 2 won!\";\r\n             break;\r\n         case DRAW:\r\n             message = \"It's a draw!\";\r\n             break;\r\n         default:\r\n             message = \"Ooops, something went wrong :(\";\r\n             break;\r\n\r\n     }\r\n    return <div className={\"panel\"} style={{top: \"200px\", width:\"300px\", height:\"200px\", zIndex: \"4\", position: \"relative\"}}>\r\n        <p>{message}</p>\r\n        <div className={\"button-holder\"}>\r\n            <div className={\"button\"} onClick={(event) => props.restart()}>Retry</div>\r\n        </div>\r\n     </div>\r\n}\r\n\r\nexport default EndPanel;","import React, { useState } from 'react';\n\nimport './App.css';\nimport Board from \"./Board\";\nimport nextTurn from \"./AI\";\nimport EndPanel from \"./EndPanel\";\n\n// Board Size\nconst NUMBER_OF_ROWS = 6;\nconst NUMBER_OF_COLUMNS = 7;\n\n// Game States\nconst GAME_IN_PROGRESS = 0;\nconst PLAYER_1_WIN = 1;\nconst PLAYER_2_WIN = 2;\nconst DRAW = 3;\n\n/**\n * Checks whether the current state is a winning state\n * @param r The clicked row\n * @param c The clicked column\n * @param newValues The board state to be checked\n * @returns {boolean} True, if the board state is a winning state\n */\nfunction checkWin(r, c, newValues) {\n    let count = 1;\n    let player = newValues[r][c];\n    // Check Bottom\n    for (let i = r + 1; i <= Math.min(r + 3, newValues.length - 1); i++) {\n        if (newValues[i][c] === player) count++;\n        else break;\n    }\n    if (count === 4) return true;\n    else count = 0;\n    // Check Horizontal\n    for (let i = Math.max(c - 3, 0); i <= Math.min(c + 3, newValues[0].length - 1); i++) {\n        if (newValues[r][i] === player) count++;\n        else count = 0;\n        if (count === 4) return true;\n    }\n    count = 0;\n    // Check Diagonal TL\n    for (let i = Math.max(-3, -r, -c); i <= Math.min(3, newValues[0].length - 1 - c, newValues.length - 1 - r); i++) {\n        if (newValues[r + i][c + i] === player) count++;\n        else count = 0;\n        if (count === 4) return true;\n    }\n    count = 0;\n    // Check Diagonal TR\n    for (let i = Math.max(-3, -(newValues.length - 1 - r), -c); i <= Math.min(3, newValues[0].length - 1 - c, r); i++) {\n        if (newValues[r - i][c + i] === player) count++;\n        else count = 0;\n        if (count === 4) return true;\n    }\n    return false;\n}\n\n/**\n * Updates the game based on a players input\n * @param turn The current turn\n * @param setTurn Function to update the current turn\n * @param setValues Function to update the current board state\n * @param values The current board state\n * @param r The clicked row\n * @param c The clicked column\n * @param setGameState Function to update the current game state\n * @returns {unknown[]|null} The new board state or null if draw or no valid turn was made\n */\nfunction update(turn, setTurn, setValues, values, r, c, setGameState) {\n    let newValues = Array.from(values);\n    // Find highest available in row in the column\n    let i = values.length - 1;\n    while(i >= 0 && values[i][c] !== 0) {\n        i--;\n    }\n    // Check if column is full\n    if (i !== -1) {\n        // Update the game state\n        newValues[i][c] = (turn % 2) + 1;\n        setTurn(turn + 1);\n        setValues(newValues);\n        // Check if draw\n        if (turn === values.length * values[0].length - 1) {\n            setGameState(DRAW);\n        }\n        // Check if player won\n        else if (checkWin(i, c, newValues)) {\n            if ((turn % 2) === 0) setGameState(PLAYER_1_WIN);\n            else setGameState(PLAYER_2_WIN);\n            return null;\n        }\n        return newValues;\n    } else {\n        // If column is full, return null\n        return null;\n    }\n}\n\n/**\n * Restarts the game\n * @param setValues Function to update the current board\n * @param setGameState Function to update the current game state\n * @param setTurn Function to update the current turn\n */\nfunction restart(setValues, setGameState, setTurn) {\n    setValues(Array.from(Array(NUMBER_OF_ROWS), () => Array.from(Array(NUMBER_OF_COLUMNS), () => 0)));\n    setTurn(0);\n    setGameState(GAME_IN_PROGRESS);\n}\n\n/**\n * Processes player's turn and lets the AI make a turn\n * @param turn The current turn\n * @param setTurn Function to update the current turn\n * @param setValues Function to update the current board\n * @param values The state of the current board\n * @param r The clicked row\n * @param c The clicked column\n * @param setGameState Function to update the current game state\n */\nfunction makeTurn(turn, setTurn, setValues, values, r, c, setGameState) {\n    // Process player's move\n    values = update(turn, setTurn, setValues, values, r, c, setGameState);\n    // If the game is over or the move was invalid, return\n    if (values === null) return;\n    // Create a copy and process AI's move\n    let copy = values.map(function(arr) {\n        return arr.slice();\n    });\n    update(turn + 1, setTurn, setValues, values, 0, nextTurn(copy), setGameState);\n}\n\n/**\n * Main Component of the FourConnect AI Application\n * @returns {JSX.Element} The React Component rendering the game state\n * @constructor\n */\nfunction App() {\n\n    const [values, setValues] = useState(Array.from(Array(NUMBER_OF_ROWS), () => Array.from(Array(NUMBER_OF_COLUMNS), () => 0)));\n    const [turn, setTurn] = useState(0);\n    const [gameState, setGameState] = useState(GAME_IN_PROGRESS);\n    document.title = \"Connect Four AI\";\n    return (\n        <div className=\"App\">\n            <h1>Connect Four AI</h1>\n            <div style={{top: \"0px\", left: \"0px\", position: \"absolute\", width: \"100%\", height: \"100%\"}} hidden={gameState === GAME_IN_PROGRESS} >\n                <div className=\"fader\" />\n                <EndPanel gameState={gameState} restart={() => restart(setValues, setGameState, setTurn)}/>\n            </div>\n            <Board rows={NUMBER_OF_ROWS} columns={NUMBER_OF_COLUMNS} values={values} onClickCell={(r, c) => {\n                if(gameState === GAME_IN_PROGRESS) makeTurn(turn, setTurn, setValues, values, r, c, setGameState);\n            }}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}